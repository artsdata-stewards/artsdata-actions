PREFIX schema: <http://schema.org/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX onto: <http://www.ontotext.com/>
construct {
    ?event a schema:Event ;
    schema:name ?names ;
    schema:startDate ?startDate ;
    schema:url ?urls ;
    schema:description ?desc ;
    schema:location ?loc ;
    schema:endDate ?endDate ;
    schema:performer ?performer ;
    schema:organizer ?indigenousAgent .
    ?loc a schema:Place ;
    schema:name ?loc_names;
    schema:sameAs ?loc_sameAs;
    schema:address ?address .
    ?address a schema:PostalAddress ;
    schema:streetAddress ?streetAddress ;
    schema:addressRegion ?addressRegion ;
    schema:addressCountry ?addressCountry ;
    schema:postalCode ?postalCode ;
    schema:addressLocality ?addressLocality .
    ?indigenousAgent a ?organizerType ;
    schema:name ?organizerName ;
    schema:sameAs ?organizerSameAs .
    ?performer a ?performerType ;
    schema:name ?performerName ;
    schema:sameAs ?performerSameAs .
}
from onto:explicit
where {
    # 1 Get indigenous agents in Wikidata with Artsdata IDs
    {
        select distinct ?indigenousAgent where {
            SERVICE <https://query.wikidata.org/sparql> {
                {
                    ?person  wdt:P172/wdt:P279* wd:Q15571255 ;
                    # indigenous peoples in North America
                    wdt:P7627 ?adid .
                } UNION {
                    ?organization  wdt:P1552/wdt:P279* wd:Q15571255 ;
                    # indigenous peoples in North America            
                    wdt:P7627 ?adid .
                }
                bind(uri(concat("http://kg.artsdata.ca/resource/",?adid))  as ?indigenousAgent)
            }
        }
    }
    # 2 Get events with indigenous organizers
    {
        select * where {
            ?event  a schema:Event ;
            schema:organizer/schema:sameAs*  ?indigenousAgent .
        }
    }
    # 3 Get event properties needed for iCal
    graph ?g {
        ?event   schema:name ?names ;
        schema:startDate ?startDate ;
        schema:url ?urls .
        # Remove past events
        filter(?startDate > now())
    }
    OPTIONAL {
        ?event schema:description ?desc .
    }
    OPTIONAL {
        ?event schema:endDate ?endDate .
        filter(datatype(?endDate) = xsd:dateTime)
    }
    # Location
    ?event schema:location ?loc .
    ?loc schema:name ?loc_names ;
    schema:address ?address .
    OPTIONAL {
        ?loc schema:sameAs ?loc_sameAs .
    }
    ?address schema:streetAddress ?streetAddress ;
    schema:addressRegion ?addressRegion ;
    schema:addressCountry ?addressCountry ;
    schema:postalCode ?postalCode ;
    schema:addressLocality ?addressLocality .
    # Performer
    ?event schema:performer  ?performer .
    ?performer schema:name ?performerName ;
    a ?performerType .
    OPTIONAL {
        ?performer schema:sameAs ?performerSameAs .
    }
    # Organizer
    ?indigenousAgent a ?organizerType ;
    schema:name ?organizerName ;
    schema:sameAs ?organizerSameAs .
    # Remove event duplicate
    # Remove duplicate external events not from CMS indigenous-performances that have Artsdata minted event (with some organizer)
    filter( not exists {
            ?event schema:sameAs ?ad_event .
            ?ad_event schema:organizer ?some_organizer .
            ?event schema:isPartOf ?source .
            filter(?source != <http://kg.artsdata.ca/culture-creates/artsdata-planet-footlight/indigenous-performances>)
            filter(contains(str(?ad_event),"kg.artsdata.ca/resource/"))  
        } )
     # Remove duplicate Artsdata core events if the external event source is CMS indigenous-performances
     filter( not exists {
            ?event ^schema:sameAs/schema:isPartOf ?source .
            filter(?source = <http://kg.artsdata.ca/culture-creates/artsdata-planet-footlight/indigenous-performances>)
            filter(contains(str(?event),"kg.artsdata.ca/resource/"))  
        } )
    # Remove events with errors
    OPTIONAL {
        ?bn sh:focusNode ?event ;
        sh:resultSeverity ?error .
    }
    filter(!Bound(?error) || ?error != sh:Violation )
}
